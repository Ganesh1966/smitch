/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.jooqs.tables;


import com.example.demo.db.jooqs.Keys;
import com.example.demo.db.jooqs.Public;
import com.example.demo.db.jooqs.tables.records.AuthorizationTokenRecord;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorizationToken extends TableImpl<AuthorizationTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.authorization_token</code>
     */
    public static final AuthorizationToken AUTHORIZATION_TOKEN = new AuthorizationToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorizationTokenRecord> getRecordType() {
        return AuthorizationTokenRecord.class;
    }

    /**
     * The column <code>public.authorization_token.jwt_token</code>.
     */
    public final TableField<AuthorizationTokenRecord, String> JWT_TOKEN = createField(DSL.name("jwt_token"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.authorization_token.key</code>.
     */
    public final TableField<AuthorizationTokenRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.authorization_token.created_at</code>.
     */
    public final TableField<AuthorizationTokenRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.authorization_token.updated_at</code>.
     */
    public final TableField<AuthorizationTokenRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private AuthorizationToken(Name alias, Table<AuthorizationTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthorizationToken(Name alias, Table<AuthorizationTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.authorization_token</code> table reference
     */
    public AuthorizationToken(String alias) {
        this(DSL.name(alias), AUTHORIZATION_TOKEN);
    }

    /**
     * Create an aliased <code>public.authorization_token</code> table reference
     */
    public AuthorizationToken(Name alias) {
        this(alias, AUTHORIZATION_TOKEN);
    }

    /**
     * Create a <code>public.authorization_token</code> table reference
     */
    public AuthorizationToken() {
        this(DSL.name("authorization_token"), null);
    }

    public <O extends Record> AuthorizationToken(Table<O> child, ForeignKey<O, AuthorizationTokenRecord> key) {
        super(child, key, AUTHORIZATION_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AuthorizationTokenRecord> getPrimaryKey() {
        return Keys.AUTHORIZATION_TOKEN_PKEY;
    }

    @Override
    public AuthorizationToken as(String alias) {
        return new AuthorizationToken(DSL.name(alias), this);
    }

    @Override
    public AuthorizationToken as(Name alias) {
        return new AuthorizationToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorizationToken rename(String name) {
        return new AuthorizationToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorizationToken rename(Name name) {
        return new AuthorizationToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
