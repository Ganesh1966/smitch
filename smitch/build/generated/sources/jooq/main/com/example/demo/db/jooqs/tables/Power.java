/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.jooqs.tables;


import com.example.demo.db.jooqs.Keys;
import com.example.demo.db.jooqs.Public;
import com.example.demo.db.jooqs.enums.ApplicationType;
import com.example.demo.db.jooqs.tables.records.PowerRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Power extends TableImpl<PowerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.power</code>
     */
    public static final Power POWER = new Power();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PowerRecord> getRecordType() {
        return PowerRecord.class;
    }

    /**
     * The column <code>public.power.id</code>.
     */
    public final TableField<PowerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.power.userid</code>.
     */
    public final TableField<PowerRecord, UUID> USERID = createField(DSL.name("userid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.power.from_time</code>.
     */
    public final TableField<PowerRecord, OffsetDateTime> FROM_TIME = createField(DSL.name("from_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.power.to_time</code>.
     */
    public final TableField<PowerRecord, OffsetDateTime> TO_TIME = createField(DSL.name("to_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.power.duration</code>.
     */
    public final TableField<PowerRecord, String> DURATION = createField(DSL.name("duration"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.power.unit_consumed</code>.
     */
    public final TableField<PowerRecord, String> UNIT_CONSUMED = createField(DSL.name("unit_consumed"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.power.application</code>.
     */
    public final TableField<PowerRecord, ApplicationType> APPLICATION = createField(DSL.name("application"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.example.demo.db.jooqs.enums.ApplicationType.class), this, "");

    private Power(Name alias, Table<PowerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Power(Name alias, Table<PowerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.power</code> table reference
     */
    public Power(String alias) {
        this(DSL.name(alias), POWER);
    }

    /**
     * Create an aliased <code>public.power</code> table reference
     */
    public Power(Name alias) {
        this(alias, POWER);
    }

    /**
     * Create a <code>public.power</code> table reference
     */
    public Power() {
        this(DSL.name("power"), null);
    }

    public <O extends Record> Power(Table<O> child, ForeignKey<O, PowerRecord> key) {
        super(child, key, POWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PowerRecord> getPrimaryKey() {
        return Keys.POWER_PKEY;
    }

    @Override
    public List<ForeignKey<PowerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POWER__FK_POWER_USER, Keys.POWER__FK_POWER_USERS);
    }

    private transient Power _power;
    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.power</code> table.
     */
    public Power power() {
        if (_power == null)
            _power = new Power(this, Keys.POWER__FK_POWER_USER);

        return _power;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.POWER__FK_POWER_USERS);

        return _user;
    }

    @Override
    public Power as(String alias) {
        return new Power(DSL.name(alias), this);
    }

    @Override
    public Power as(Name alias) {
        return new Power(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Power rename(String name) {
        return new Power(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Power rename(Name name) {
        return new Power(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, OffsetDateTime, OffsetDateTime, String, String, ApplicationType> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
