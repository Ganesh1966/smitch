/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.jooqs;


import com.example.demo.db.jooqs.tables.AuthorizationToken;
import com.example.demo.db.jooqs.tables.Power;
import com.example.demo.db.jooqs.tables.User;
import com.example.demo.db.jooqs.tables.records.AuthorizationTokenRecord;
import com.example.demo.db.jooqs.tables.records.PowerRecord;
import com.example.demo.db.jooqs.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorizationTokenRecord> AUTHORIZATION_TOKEN_PKEY = Internal.createUniqueKey(AuthorizationToken.AUTHORIZATION_TOKEN, DSL.name("authorization_token_pkey"), new TableField[] { AuthorizationToken.AUTHORIZATION_TOKEN.JWT_TOKEN }, true);
    public static final UniqueKey<PowerRecord> POWER_PKEY = Internal.createUniqueKey(Power.POWER, DSL.name("power_pkey"), new TableField[] { Power.POWER.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PowerRecord, PowerRecord> POWER__FK_POWER_USER = Internal.createForeignKey(Power.POWER, DSL.name("fk_power_user"), new TableField[] { Power.POWER.USERID }, Keys.POWER_PKEY, new TableField[] { Power.POWER.ID }, true);
    public static final ForeignKey<PowerRecord, UserRecord> POWER__FK_POWER_USERS = Internal.createForeignKey(Power.POWER, DSL.name("fk_power_users"), new TableField[] { Power.POWER.USERID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
}
